#![deny(missing_docs)]
#![doc = include_str!("../README.md")]

#[macro_use]
mod typed_vec;

#[cfg(any(test, feature = "arbitrary"))]
pub mod arbitrary;
pub mod curve;
mod geom;
mod num;
pub mod order;
mod position;
mod segments;
pub mod sweep;
pub mod topology;

#[cfg(feature = "generators")]
pub mod generators;

pub use geom::{Point, Segment};
use kurbo::Shape;
pub use segments::{SegIdx, Segments};

// pub so that we can use it in fuzz tests, but it's really private
#[doc(hidden)]
pub mod treevec;

use topology::{BinaryWindingNumber, Topology};

#[cfg(test)]
pub mod perturbation;

/// A fill rule tells us how to decide whether a point is "inside" a polyline.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
pub enum FillRule {
    /// The point is "inside" if its winding number is odd.
    EvenOdd,
    /// The point is "inside" if its winding number is non-zero.
    NonZero,
}

/// Binary operations between sets.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
pub enum BinaryOp {
    /// A point is in the union of two sets if it is in either one.
    Union,
    /// A point is in the intersection of two sets if it is in both.
    Intersection,
    /// A point is in the difference of two sets if it is in the first but not the second.
    Difference,
    /// A point is in the exclusive-or of two sets if it is in one or the other, but not both.
    Xor,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
/// The input points were faulty.
pub enum Error {
    /// At least one of the inputs was infinite.
    Infinity,
    /// At least one of the inputs was not a number.
    NaN,
}

/// Computes a boolean operation between two sets, each of which is described as a collection of closed polylines.
pub fn binary_op(
    set_a: &kurbo::BezPath,
    set_b: &kurbo::BezPath,
    fill_rule: FillRule,
    op: BinaryOp,
) -> Result<topology::Contours, Error> {
    // Find the extremal values, to figure out how much precision we can support.
    let bbox = set_a.bounding_box().union(set_b.bounding_box());
    let min = bbox.min_x().min(bbox.min_y());
    let max = bbox.max_x().max(bbox.max_y());
    if min.is_infinite() || max.is_infinite() {
        return Err(Error::Infinity);
    }
    // If there was any NaN in the input, it should have propagated to the min and max.
    if min.is_nan() || max.is_nan() {
        return Err(Error::NaN);
    }

    // TODO: we did some analysis for error bounds in the case of polylines.
    // Think more about what makes sense for curves.
    let m_2 = min.abs().max(max.abs());
    let eps = m_2 * (f64::EPSILON * 64.0);
    let eps = eps.max(1e-6);

    debug_assert!(eps.is_finite());

    let top = Topology::from_paths_binary(set_a, set_b, eps);

    let inside = |windings: BinaryWindingNumber| {
        let inside_one = |winding| match fill_rule {
            FillRule::EvenOdd => winding % 2 != 0,
            FillRule::NonZero => winding != 0,
        };

        match op {
            BinaryOp::Union => inside_one(windings.shape_a) || inside_one(windings.shape_b),
            BinaryOp::Intersection => inside_one(windings.shape_a) && inside_one(windings.shape_b),
            BinaryOp::Xor => inside_one(windings.shape_a) != inside_one(windings.shape_b),
            BinaryOp::Difference => inside_one(windings.shape_a) && !inside_one(windings.shape_b),
        }
    };

    Ok(top.contours(inside))
}

#[cfg(test)]
mod tests {
    use kurbo::BezPath;

    use super::*;

    #[test]
    fn two_squares() {
        fn to_bez(mut points: impl Iterator<Item = (f64, f64)>) -> BezPath {
            let p = points.next().unwrap();
            let mut ret = BezPath::default();
            ret.move_to(p);
            for q in points {
                ret.line_to(q);
            }
            ret.line_to(p);
            ret
        }
        let a = vec![(0.0, 0.0), (1.0, 0.0), (1.0, 1.0), (0.0, 1.0)];
        let b = vec![(-0.5, -0.5), (0.5, -0.5), (0.5, 0.5), (-0.5, 0.5)];
        let output = binary_op(
            &to_bez(a.into_iter()),
            &to_bez(b.into_iter()),
            FillRule::EvenOdd,
            BinaryOp::Intersection,
        )
        .unwrap();

        insta::assert_ron_snapshot!(output);
    }

    // This example came from fiddling with graphite, caused by the positioning not making progress.
    #[test]
    fn graphite_hang() {
        let p1 = BezPath::from_svg("M27.30779709,-257.85907878 C27.30779665,-257.85907835 27.307796200000002,-257.85907792 27.30779576,-257.8590775 C27.292172620000002,-257.8439677 -109.98458240000001,-125.07781586 -233.88593633,-5.24757973 C-233.88593684,-5.24757923 -233.88593736,-5.24757873 -233.88593787,-5.24757824 C-233.88593736,-5.2475777400000005 -233.88593684,-5.24757724 -233.88593632,-5.24757675 C-174.52579263,51.894883570000005 -115.13821436,109.22164426 -77.72402204000001,145.36173051 C-77.72402157,145.36173091 -77.72402116,145.3617313 -77.7240208,145.3617317 C-77.7240208,145.3617317 -77.72402077,145.3617317 -77.72402077,145.3617317 C-77.72401908,145.3617313 -77.72401740000001,145.36173091 -77.72401572,145.36173051 C-1.60745976,127.42335802000001 72.89114167,108.36966443 101.12619937000001,101.0791851 C101.12620127,101.07918461 101.12620318,101.07918412000001 101.12620509,101.07918362000001 C101.1262059,101.07918313 101.12620674,101.07918264 101.1262076,101.07918215000001 C105.56968257,98.47134695 110.06808693,95.83127419 114.61338829,93.16367801 C114.61338927,93.16367744 114.61339025000001,93.16367686 114.61339123,93.16367628 C114.61339123,93.16367628 114.61339123,93.16367628 114.61339123,93.16367628 C114.61339142,93.16367571 114.61339161000001,93.16367513 114.6133918,93.16367456 C123.52785808,66.12754849 166.90764887,-69.59356743000001 182.19132273,-195.37502561 C182.19132278,-195.37502607 182.19132284,-195.37502653 182.19132290000002,-195.37502699 C182.19132175000001,-195.37502746 182.19132061,-195.37502792 182.19131946000002,-195.37502838 C99.03601942,-228.9220441 27.32536748,-257.85199043 27.307800320000002,-257.8590775 C27.30779923,-257.85907792 27.30779816,-257.85907835 27.30779709,-257.85907878 L27.30779709,-257.85907878 Z M-408.62463824,-172.46325538 C-408.62463827,-172.46325472 -408.62463831,-172.46325406 -408.62463834,-172.4632534 C-414.02520486000003,-63.40231834 -377.28160484,34.20037327 -342.02221595000003,99.33558422 C-342.02221565,99.33558477 -342.02221536,99.33558531 -342.02221506,99.33558586000001 C-342.02221506,99.33558586000001 -342.02221506,99.33558586000001 -342.02221506,99.33558586000001 C-342.0222145,99.33558531 -342.02221393,99.33558477 -342.02221337000003,99.33558422 C-310.40978596,68.76186957 -272.80781456,32.395413760000004 -233.88593941,-5.24757675 C-233.8859389,-5.24757724 -233.88593838,-5.2475777400000005 -233.88593787,-5.24757824 C-233.88593787,-5.24757824 -233.88593787,-5.24757824 -233.88593787,-5.24757824 C-233.88593839,-5.24757873 -233.88593891,-5.24757923 -233.88593942,-5.24757973 C-304.53464918000003,-73.25686748 -375.14449713,-141.00509201 -408.62463617000003,-172.4632534 C-408.62463687,-172.46325406 -408.62463756,-172.46325472 -408.62463824,-172.46325538 L-408.62463824,-172.46325538 Z").unwrap();
        let p2 = BezPath::from_svg("M27.3077958,-257.85907753 C27.2923816,-257.84416980000003 -109.98448809,-125.07790706 -233.88593634,-5.24757971 C-233.88593634,-5.24757971 -233.88593825,-5.24757971 -233.88593825,-5.24757971 C-233.88593941,-5.24757971 -233.88593942,-5.24757972 -233.88593942,-5.24757972 C-304.53459173,-73.25681217 -375.1443823,-141.00498183 -408.62463995,-172.46317667 C-408.62464066,-172.46317733 -408.62464135,-172.46317798 -408.62464203,-172.46317863000002 C-408.62464208,-172.46317798 -408.62464211,-172.46317733 -408.62464214,-172.46317667 C-414.02518763,-63.40227258 -377.28159657000003,34.20038853 -342.02221596,99.3355842 C-342.02221566000003,99.33558476 -342.02221536,99.33558531 -342.02221506,99.33558586000001 C-342.02221449,99.33558531 -342.02221392,99.33558476 -342.02221335,99.3355842 C-310.40978594,68.76186955 -272.80781455,32.39541375 -233.88593941,-5.24757675 C-233.88593941,-5.24757675 -233.88593941,-5.24757675 -233.88593941,-5.24757675 C-233.88593889,-5.24757724 -233.88593838,-5.2475777400000005 -233.88593787,-5.24757823 C-233.88593735,-5.2475777400000005 -233.88593684,-5.24757724 -233.88593632,-5.24757675 C-233.88593632,-5.24757675 -233.88593632,-5.24757675 -233.88593632,-5.24757675 C-174.52579259,51.89488361 -115.13821427,109.22164435 -77.72402196,145.36173056 C-77.72402157,145.36173094 -77.72402117,145.36173132 -77.72402078,145.3617317 C-77.72401917,145.36173132 -77.72401755,145.36173094 -77.72401594,145.36173056 C-1.60745982,127.42335803 72.89114182,108.36966439 101.12619946,101.07918507000001 C101.12620136,101.07918458 101.12620325,101.07918409 101.12620514,101.07918360000001 C101.12620595,101.07918311 101.12620679,101.07918263 101.12620764,101.07918214 C105.56968257,98.47134695 110.0680869,95.83127422 114.61338822,93.16367806 C114.61338923,93.16367747 114.61339023000001,93.16367689 114.61339123,93.1636763 C114.61339142,93.16367571 114.61339161000001,93.16367512000001 114.61339181,93.16367453000001 C123.52785811,66.12754843 166.90764887,-69.59356747 182.19132273,-195.37502563 C182.19132279000002,-195.37502608 182.19132285,-195.37502654 182.19132289,-195.37502699 C182.19132177,-195.37502745 182.19132064000001,-195.3750279 182.1913195,-195.37502836000002 C99.03588674,-228.92209763 27.32513858,-257.85208278 27.30780024,-257.85907753 C27.30780024,-257.85907753 27.30779791,-257.85907753 27.30779791,-257.85907753 C27.30779791,-257.85907753 27.3077958,-257.85907753 27.3077958,-257.85907753 L27.3077958,-257.85907753 Z").unwrap();
        binary_op(&p1, &p2, FillRule::EvenOdd, BinaryOp::Union).unwrap();
    }

    #[test]
    fn graphite_crash() {
        let p1 = BezPath::from_svg("M-51,-390 C-51.00000037,-389.99999955 -51.00000075,-389.99999909 -51.00000112,-389.99999864 C-51.0133208,-389.98380542 -169.63665568,-245.76914195 -276.70205531,-115.60587692 C-276.70205486000003,-115.60587746 -276.70205486000003,-115.60587746 -276.70205531,-115.60587692 C-276.70205486000003,-115.60587638 -276.70205442,-115.60587585 -276.70205397,-115.60587531 C-192.38931516,-13.58098944 -108.0125259,88.98477391 -108.00000139000001,88.99999842 C-108.00000091,88.99999895 -108.00000044000001,88.99999947 -108,89 C-107.99999928,88.99999947 -107.99999924000001,88.99999947 -107.9999999,89 C-107.99266176,88.99458625 300,-212 300,-212 C300,-212 -50.96433872,-389.98191536 -50.99999728,-389.99999864 C-50.9999982,-389.99999909 -50.999999100000004,-389.99999955 -51,-390 L-51,-390 Z M-445,-317 C-445.000001,-316.99999994 -445.00000199,-316.99999988 -445.00000299,-316.99999981 C-445.00000199,-316.99999976 -445.00000193,-316.99999971 -445.0000028,-316.99999965 C-445.00000193,-316.9999996 -445.00000188,-316.99999956 -445.00000264,-316.99999951 C-445.00000188,-316.99999943 -445.00000216,-316.99999934 -445.0000035,-316.99999926 C-445.00000216,-316.9999992 -445.000002,-316.99999914 -445.000003,-316.99999907 C-445.000002,-316.99999903 -445.00000187,-316.99999898 -445.00000262000003,-316.99999893 C-445.00000187,-316.99999886 -445.00000206,-316.99999879 -445.00000319000003,-316.99999872 C-445.00000206,-316.99999865 -445.00000206,-316.99999858 -445.00000319000003,-316.99999851 C-445.07164839,-316.99554979 -606,-307 -606,-307 C-606,-307 -445.00289573000003,88.99287759 -445,89 C-445.00000023,88.99999940000001 -445.00000023,88.99999940000001 -445,89 C-444.99999951,88.99999940000001 -444.99999901,88.9999988 -444.99999852,88.99999820000001 C-444.98741208,88.98469641 -364.75335505,-8.5587384 -276.70205664,-115.60587531 C-276.70205619,-115.60587585 -276.70205575,-115.60587638 -276.70205531,-115.60587692 C-276.70205531,-115.60587692 -276.70205531,-115.60587692 -276.70205531,-115.60587692 C-276.70205576,-115.60587746 -276.7020562,-115.605878 -276.70205665000003,-115.60587854 C-360.13048219,-216.56067745000001 -443.49619297,-316.98588429 -444.99987267,-316.99999851 C-444.99987444,-316.99999858 -444.99987444,-316.99999865 -444.99987267,-316.99999872 C-444.99987444,-316.99999879 -444.99987601000004,-316.99999886 -444.99987738,-316.99999893 C-444.99988877,-316.99999898 -444.99988744,-316.99999903 -444.99987339,-316.99999907 C-444.9998795,-316.99999914 -444.99987949,-316.9999992 -444.99987336,-316.99999926 C-444.99986538,-316.99999934 -444.99986663,-316.99999943 -444.99987712,-316.99999951 C-444.99988835,-316.99999956 -444.99988766,-316.9999996 -444.99987503,-316.99999965 C-444.99988443,-316.99999971 -444.9998839,-316.99999976 -444.99987344,-316.99999981 C-444.99987969,-316.99999988 -444.99992188,-316.99999994 -445,-317 L-445,-317 Z").unwrap();
        let p2 = BezPath::from_svg("M-147.77035068,-523.63725234 C-147.77897268,-523.63725228 -147.78328911,-523.63725221 -147.78329996,-523.63725215 C-147.78278455,-523.6372520900001 -147.78276705,-523.63725204 -147.78324747,-523.63725198 C-147.78238075000002,-523.63725194 -147.78233785,-523.63725189 -147.78311876,-523.63725184 C-147.78494057,-523.63725176 -147.78487849,-523.63725167 -147.78293254,-523.63725159 C-147.78318771,-523.6372515200001 -147.78331018,-523.63725146 -147.78329996,-523.6372514 C-147.78235912,-523.63725135 -147.78229246,-523.6372513 -147.78309999,-523.63725125 C-147.78382096,-523.63725118 -147.78386999,-523.63725111 -147.78324709,-523.63725104 C-147.78386999,-523.63725097 -147.78386999,-523.6372509 -147.78324709,-523.63725083 C-290.97059178,-523.62540865 -459.36114997,-454.02730629 -459.36114997,-454.02730629 C-503.78067701000003,-360.84914474 -515.91201353,-267.22250217 -511.28673862,-182.54906502 C-501.51553210000003,-3.67069389 -416.96053353,135.25003698 -404.05763535,145.57150696 C-402.79147715,146.58435025 -400.17221075000003,147.05752789000002 -396.38569434,147.05843347 C-396.38546768000003,147.05843352 -396.3852332,147.05843358 -396.3849909,147.05843363 C-396.38523229000003,147.05843368 -396.3852474,147.05843373 -396.38503624000003,147.05843377 C-396.38525358,147.05843386 -396.38517355,147.05843394000001 -396.38479617,147.05843402 C-396.38516954,147.05843409 -396.38521642,147.05843415 -396.38493682,147.05843421 C-396.38521417,147.05843426 -396.38524896,147.05843430000002 -396.38504119,147.05843435 C-396.38525258,147.05843442 -396.38520028,147.05843449 -396.38488428,147.05843456 C-396.38520028,147.05843463 -396.38183866,147.0584347 -396.37479941,147.05843477 C-396.36776496,147.0584347 -396.36439327,147.05843463 -396.36468434,147.05843456 C-396.36439327,147.05843449 -396.36434448,147.05843442 -396.36453799000003,147.05843435 C-396.36434177,147.05843430000002 -396.36437435,147.05843426 -396.36463574,147.05843421 C-396.36437604,147.05843415 -396.36441911000003,147.05843409 -396.36476495,147.05843402 C-396.36442211,147.05843394000001 -396.36434802,147.05843386 -396.36454266,147.05843377 C-396.36434339,147.05843373 -396.36435761,147.05843368 -396.36458529000004,147.05843363 C-396.36435829,147.05843358 -396.36412543,147.05843352 -396.36388671000003,147.05843347 C-343.24271064,147.0457326 -61.00302123,54.328209290000004 -61.00302123,54.328209290000004 C-61.00302123,54.328209290000004 54.36842292,-476.62945279 -57.54655157,-511.5974822 C-84.89366723,-520.14213629 -115.68055714,-523.63459936 -147.75748146,-523.63725083 C-147.75684889000001,-523.6372509 -147.75684889000001,-523.63725097 -147.75748146,-523.63725104 C-147.75684889000001,-523.63725111 -147.75689632,-523.63725118 -147.75762373,-523.63725125 C-147.75842483,-523.6372513 -147.75835924,-523.63725135 -147.75742698,-523.6372514 C-147.75740817,-523.63725146 -147.75753208,-523.6372515200001 -147.7577987,-523.63725159 C-147.75584128,-523.63725167 -147.75577675,-523.63725176 -147.75760512,-523.63725184 C-147.75837949,-523.63725189 -147.75833706,-523.63725194 -147.75747781,-523.63725198 C-147.75795075,-523.63725204 -147.75793379,-523.6372520900001 -147.75742692,-523.63725215 C-147.75742922,-523.63725221 -147.76173714,-523.63725228 -147.77035068,-523.63725234 L-147.77035068,-523.63725234 Z").unwrap();
        binary_op(&p1, &p2, FillRule::EvenOdd, BinaryOp::Intersection).unwrap();
    }

    #[test]
    fn graphite_crash_2() {
        let p1 = BezPath::from_svg("M-4.04445106,-227.53699448 C-4.04445141,-227.53699414000002 -4.04445176,-227.5369938 -4.0444521,-227.53699347 C-51.7088457,-181.43874387 -146.15069456,-90.10004021 -233.88593633,-5.24757973 C-233.88593684,-5.24757923 -233.88593736,-5.24757873 -233.88593787,-5.24757824 C-233.88593736,-5.2475777400000005 -233.88593684,-5.24757724 -233.88593632,-5.24757675 C-136.31505417,88.6780763 -38.67004972,183.1016691 -38.655462480000004,183.1157752 C-38.65546192,183.11577569 -38.65546137,183.11577618 -38.655460850000004,183.11577667 C-38.65546,183.11577618 -38.655459130000004,183.11577569 -38.65545825,183.1157752 C-38.636636960000004,183.10472910000001 63.43909693,123.19740587 172.66309485,59.09483126 C172.66309582,59.0948307 172.66309679,59.09483013 172.66309776,59.09482957 C172.66309789000002,59.094829000000004 172.66309804,59.09482844 172.66309821000002,59.09482787 C195.93027539,-28.361478 218.13974889,-146.00472757 185.99061181,-193.84229367 C185.99061146,-193.84229419000002 185.99061111,-193.84229471 185.99061077000002,-193.84229523 C185.99061077000002,-193.84229523 185.99061076,-193.84229523 185.99061076,-193.84229523 C185.99060948000002,-193.84229575 185.99060819000002,-193.84229627 185.99060690000002,-193.84229679 C163.21411887,-203.03092579 141.22123575,-211.90342815 121.23520424,-219.96631425 C121.23520325,-219.96631465000002 121.23520226000001,-219.96631505 121.23520127,-219.96631545 C121.23519826,-219.96631585 121.23519525,-219.96631625 121.23519224,-219.96631665 C81.94489447000001,-225.17543523 38.58618673,-227.27591237000001 -4.04428678,-227.53699347 C-4.0443415400000005,-227.5369938 -4.0443963,-227.53699414000002 -4.04445106,-227.53699448 L-4.04445106,-227.53699448 Z M-298.96972663,-67.82445804 C-298.96972679,-67.82445746 -298.96972695,-67.82445687 -298.96972711,-67.82445628 C-308.0266757,-34.79351542 -313.47490909,-4.88751908 -311.92312795,13.14190599 C-310.47587425,29.956875240000002 -307.39575194,46.21813067 -303.15410566,61.74459228 C-303.1541055,61.74459287 -303.15410534,61.74459345 -303.15410518,61.74459404 C-303.15410518,61.74459404 -303.15410509000003,61.74459404 -303.15410509000003,61.74459404 C-303.1541046,61.74459345 -303.15410399,61.74459287 -303.15410327,61.74459228 C-281.29005965,40.5989515 -257.83792341000003,17.91739932 -233.88593941,-5.24757675 C-233.8859389,-5.24757724 -233.88593838,-5.2475777400000005 -233.88593787,-5.24757824 C-233.88593787,-5.24757824 -233.88593787,-5.24757824 -233.88593787,-5.24757824 C-233.88593839,-5.24757873 -233.88593891,-5.24757923 -233.88593942,-5.24757973 C-255.96152711,-26.49842777 -278.03332044,-47.72378629 -298.96972479,-67.82445628 C-298.96972541,-67.82445687 -298.96972602,-67.82445746 -298.96972663,-67.82445804 L-298.96972663,-67.82445804 Z").unwrap();
        let p2 = BezPath::from_svg("M-4.04445105,-227.53699448 C-4.0444448,-227.53699444 -4.04443853,-227.5369944 -4.04443224,-227.53699436 C-4.04443855,-227.53699429 -4.04443619,-227.53699422 -4.04442515,-227.53699416 C-4.04443617,-227.53699411 -4.0444375500000005,-227.53699405 -4.04442929,-227.536994 C-4.04443757,-227.53699393 -4.0444355100000005,-227.53699385000002 -4.0444230800000005,-227.53699378000002 C-4.0444355100000005,-227.5369937 -4.04444445,-227.53699362 -4.0444499,-227.53699355 C-4.04444445,-227.53699362 -4.0444355100000005,-227.5369937 -4.0444230800000005,-227.53699378000002 C-4.0444355100000005,-227.53699385000002 -4.04443757,-227.53699393 -4.04442929,-227.536994 C-4.0444375500000005,-227.53699405 -4.04443617,-227.53699411 -4.04442515,-227.53699416 C-4.04443619,-227.53699422 -4.04443855,-227.53699429 -4.04443224,-227.53699436 C-4.04443853,-227.5369944 -4.0444448,-227.53699444 -4.04445105,-227.53699448 L-4.04445105,-227.53699448 Z M-4.04445201,-227.53699355 C-51.70884559,-181.43874397 -146.15069452,-90.10004025 -233.88593634,-5.24757971 C-233.88593634,-5.24757971 -233.88593825,-5.24757971 -233.88593825,-5.24757971 C-233.88593941,-5.24757971 -233.88593942,-5.24757972 -233.88593942,-5.24757972 C-255.96152637,-26.49842706 -278.03331896000003,-47.72378487 -298.9697253,-67.82445426 C-298.96972593,-67.82445486 -298.96972655,-67.82445546 -298.96972717,-67.82445606 C-298.96972733,-67.82445546 -298.96972750000003,-67.82445486 -298.96972767,-67.82445426 C-308.02667592,-34.793514200000004 -313.47490906,-4.88751871 -311.92312795,13.14190599 C-310.47587426,29.95687522 -307.39575195000003,46.21813063 -303.15410568,61.74459222 C-303.15410552000003,61.74459282 -303.15410535,61.74459342 -303.15410519,61.74459402 C-303.15410457,61.74459342 -303.15410394,61.74459282 -303.15410332,61.74459222 C-281.29005969,40.59895153 -257.83792342,17.917399330000002 -233.88593941,-5.24757675 C-233.88593941,-5.24757675 -233.88593941,-5.24757675 -233.88593941,-5.24757675 C-233.88593889,-5.24757724 -233.88593838,-5.2475777400000005 -233.88593787,-5.24757823 C-233.88593735,-5.2475777400000005 -233.88593684,-5.24757724 -233.88593632,-5.24757675 C-233.88593632,-5.24757675 -233.88593632,-5.24757675 -233.88593632,-5.24757675 C-136.31500758,88.67812116 -38.66995645,183.1017593 -38.65546246,183.11577522000002 C-38.6554624,183.11577526 -38.65546235,183.11577531 -38.6554623,183.11577536000001 C-38.65546195,183.11577567 -38.65546121,183.11577599 -38.6554601,183.1157763 C-38.65545957,183.11577599 -38.65545901,183.11577567 -38.6554584,183.11577536000001 C-38.63718132,183.10504862 63.43880567,123.19757684 172.6630948,59.094831310000004 C172.66309578,59.09483074 172.66309677,59.09483016 172.66309775,59.09482959 C172.66309789000002,59.09482901 172.66309804,59.09482844 172.66309821000002,59.09482786 C195.93027539,-28.36147801 218.13974889,-146.00472758 185.99061181,-193.84229367 C185.99061146,-193.84229419000002 185.9906111,-193.84229471 185.99061076,-193.84229523 C185.99060946,-193.84229576 185.99060816,-193.84229627 185.99060688,-193.8422968 C163.21411883,-203.03092581 141.22123568,-211.90342818 121.23520415,-219.96631429 C121.2352032,-219.96631467 121.23520226000001,-219.96631506 121.23520131000001,-219.96631544000002 C121.23519842,-219.96631582 121.23519553,-219.96631621 121.23519264000001,-219.96631659 C81.94489083,-225.17543574 38.5861782,-227.27591278 -4.04429958,-227.53699355 C-4.04429958,-227.53699355 -4.0444499,-227.53699355 -4.0444499,-227.53699355 C-4.0444499,-227.53699355 -4.04445201,-227.53699355 -4.04445201,-227.53699355 L-4.04445201,-227.53699355 Z").unwrap();
        binary_op(&p1, &p2, FillRule::EvenOdd, BinaryOp::Union).unwrap();
    }
}
